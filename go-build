#!/bin/bash

# SYNOPSIS:
# $ source go-build   # set GOROOT_{BOOTSTRAP,FINAL} environment variables in the interacive shell
# $ ./go-build        # build golang
# $ ./go-install      # install into $HOME/go1.11 etc
#
# The file 'GO-VERSION' should contain a string like 'go1.11'

# Rerfences:
# https://golang.org/doc/install/source#git
# https://golang.org/doc/install/source#environment
# https://src.fedoraproject.org/rpms/golang/blob/master/f/golang.spec

version=$(cat GO-VERSION)
version=${version:=go1.11}

export GOROOT_BOOTSTRAP=/usr
export GOROOT_FINAL=$HOME/"$version"

build() {
	pushd go/src && \
	git checkout "$version" && \
	./make.bash --no-clean -v && \
	popd && \
	pushd go && \
	GOROOT=$(pwd) PATH=$(pwd)/bin:$PATH go install -buildmode=shared -v -x std && \
	GOROOT=$(pwd) PATH=$(pwd)/bin:$PATH go install -race -v -x std && \
	GOROOT=$(pwd) PATH=$(pwd)/bin:$PATH go get golang.org/x/tools/cmd/... # godoc
}

install() {
	rm -rf $GOROOT_FINAL && \
	mkdir -p $GOROOT_FINAL && \
	pushd go && \
		cp -apv api bin doc favicon.ico lib pkg robots.txt src test VERSION \
			$GOROOT_FINAL && \
	popd && \
	./template-gen --go-version "$version" go.env.in && \
	printf '\n\nSource the "go.env" file to set PATH\n' && \
	printf 'go tool {cover,vet,pprof} etc are available\n' && \
	printf 'Set GOPATH to your workspace directory\n'
}

bname=$(basename $0)
case $bname in
go-build) build ;;
go-install) install ;;
*) printf 'GOROOT_BOOTSTRAP: %s\n''GOROOT_FINAL: %s\n' "$GOROOT_BOOTSTRAP" "$GOROOT_FINAL"
esac
